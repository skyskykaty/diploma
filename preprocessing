import nltk
from nltk.corpus import stopwords
from nltk.stem.snowball import SnowballStemmer
from scipy.sparse import hstack
from sklearn.preprocessing import MultiLabelBinarizer, OneHotEncoder, StandardScaler
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.impute import SimpleImputer


# преобразование строки с дефектами
def process_defects(defect_str): -> list
    '''
    # преобразовывает строку с дефектами в список дефектов вида ['XX-YY (комментарий), ...]
    # обрабатывает скобки в скобках
    # возвращает список дефектов
    '''
    defect_str = str(defect_str)

    # Обрпабатываем вложенные скобки
    result = []
    buffer = []
    open_parentheses = 0

    for char in defect_str:
        if char == '(':
            if open_parentheses > 0:
                buffer.append(char)
            open_parentheses += 1
            if open_parentheses == 1:
                buffer.append('(')  # Добавляем первую скобку
        elif char == ')':
            open_parentheses -= 1
            if open_parentheses > 0:
                buffer.append(char)
            elif open_parentheses == 0:
                buffer.append(')')
                result.append(''.join(buffer).strip())
                buffer = []
        elif char == ',' and open_parentheses == 0:
            if buffer:
                result.append(''.join(buffer).strip())
                buffer = []
        else:
            buffer.append(char)

    if buffer:
        result.append(''.join(buffer).strip())

    return result

def extract_cycles_count(defect_list):
    '''
    переносит количество включений в отдельный столбец
    возвращает список дефектов без количества включений, количество включений в отдельном столбце
    '''
    if not isinstance(defect_list, list):
        return pd.Series([None, defect_list])

    cycle_count = None
    cleaned_defects = []

    for d in defect_list:
        d_clean = d.strip()

        # Если элемент начинается с "88" (учтём, что могут быть варианты "88", "88-XX", и т.п.)
        if d_clean.startswith("88"):
            match = re.search(r'\((\d+)\+?\)', d_clean)
            if match:
                cycle_count = int(match.group(1))
                # Не добавляем этот элемент в итоговый список дефектов
                continue

        cleaned_defects.append(d)

    return pd.Series([cycle_count, cleaned_defects])


def remove_99_defects(defects):
    '''
    удаляет дефекты с кодом 99-ХХ
    возвращает список без этих дефектов
    '''
    filtered = []
    for d in defects:
        # Если элемент начинается с "99" (с вариантами "99", "99-XX" и т.д.),
        # игнорируем его
        if d.strip().startswith("99"):
            continue
        filtered.append(d)

    return filtered if filtered else None


# только для обработки исторических данных

def extract_cycle_counts_from_list(defects):
    '''
    обрабатывает количество включений, которое внесено неверно
    возвращает количество включений в отдельном столбце
    '''
    if not isinstance(defects, list):
        return pd.Series([None, defects])

    cycle_count = None
    pattern = r'^\((\d+)\+?\)$'

    if defects and re.match(pattern, defects[0]):
        m = re.match(pattern, defects[0])
        if m:
            cycle_count = int(m.group(1))
        defects = defects[1:]

    return pd.Series([cycle_count, defects])


def remove_noncode_comments(defect_list):
    '''
    удаляет неверно внесенные комментарии
    возвращает список без комментариев
    '''
    # Если defect_list — это None, возвращаем его без изменений
    if defect_list is None:
        return defect_list

    # Регулярное выражение для поиска дефектов в формате XX-XX и комментариев в скобках
    valid_defect_pattern = r'^\d{2}-\d{2}(\s*\(.*\))?$'

    # Фильтруем дефекты, оставляя только те, которые соответствуют формату XX-XX (с комментариями в скобках)
    cleaned_list = [defect.strip() for defect in defect_list
                    if pd.notna(defect) and re.match(valid_defect_pattern, defect.strip())]

    return cleaned_list

def extract_defect_codes(defects):
    '''
    создает список кодов дефектов без комментариев
    '''
    if not defects:
        return []
    return list({re.findall(r'\d{2}-\d{2}', d)[0] for d in defects if re.findall(r'\d{2}-\d{2}', d)})

def replace_defect_codes_with_description(defect_list, df_transl):
    """
    Заменяет коды дефектов вида 'XX-YY' на текст вида 'описание_XX - описание_YY',
    сохраняя комментарий (если есть в скобках).

    Parameters:
        defect_list (list of str): строки вида 'XX-YY (комментарий)'
        df_transl (pd.DataFrame): содержит колонки 'code', 'col1', 'col2'

    Returns:
        list of str: тексты с заменёнными кодами, готовые для векторизации
    """
    if not isinstance(defect_list, list):
        return []

    # Создаём словарь: XX-YY -> "описание XX - описание YY"
    code_to_desc = {}
    for _, row in df_transl.iterrows():
        code = row["code"]
        desc = f"{row['col1']} - {row['col2']}"
        code_to_desc[code] = desc

    result = []
    for defect in defect_list:
        match = re.match(r"(\d{2}-\d{2})(?:\s*\((.*?)\))?", defect)
        if match:
            code = match.group(1)
            comment = match.group(2)
            description = code_to_desc.get(code, code)
            if comment:
                result.append(f"{description} ({comment})")
            else:
                result.append(description)
        else:
            # если код не распознан, оставляем строку как есть
            result.append(defect)

    return result

def preprocess_text(text):
    '''
    Осуществляет предобработку текста:
    - Преобразует списки в строки
    - Приводит к нижнему регистру
    - Удаляет лишние символы
    - Удаляет стоп-слова
    - Выполняет стемминг
    - Возвращает список токенов
    '''
    # Преобразуем список в строку, если нужно
    if isinstance(text, list):
        text = ' '.join(text)

    if not isinstance(text, str):
        return []

    text = text.lower()
    text = re.sub(r'[^а-яa-z0-9\s]', '', text)  # Удаляем всё, кроме букв, цифр и пробелов
    tokens = text.split()
    tokens = [word for word in tokens if word not in stop_words]
    tokens = [stemmer.stem(word) for word in tokens]
    return tokens

def count_ok_and_not_ok(defect_descr):
    ok_count = 0
    not_ok_count = 0

    for defect in defect_descr:
        # Извлекаем комментарий после кода дефекта
        match = re.match(r"^01-01.*?(\(.*\))", defect)
        if match:
            comment = match.group(1).lower()  # Приводим к нижнему регистру для унификации

            # Ищем "ок" и "не ок"
            ok_count += len(re.findall(r"ок", comment))
            not_ok_count += len(re.findall(r"не ок", comment))

    return {'ok_count': ok_count, 'not_ok_count': not_ok_count}


def manual_process_defects(defect_list):
    '''
    вручную сжимает число уникальных дефектов
    '''
    if defect_list is None:
        return defect_list

    processed_defects = []

    # Дефекты, которые не подлежат разбиению в зависимости от комментариев
    codes_to_keep = {"00-02", "00-03", "00-05", "00-06", "00-07", "00-10", "00-23", "87-01","87-02",
                     "08-07", "04-08", "04-01", "01-14", "01-11", "02-03", "02-07", "02-14", "04-02",
                     "01-00", "02-21", "02-26"}

    for defect in defect_list:
        if isinstance(defect, str):

            # 1. Если начинается с одного из codes_to_keep — оставляем только код, комментарии удаляем
            if any(defect.startswith(code) for code in codes_to_keep):
                code = defect.split()[0]
                processed_defects.append(code)

            # 2. Обработка 00-01 с определёнными комментариями → 00-23
            elif re.match(r"^00-01", defect):
                if any(comment in defect for comment in ["доставлен без резины", "доставлен без А-резины", "разобранн"]):
                    processed_defects.append("00-23")
                else:
                    processed_defects.append("00-01")

            # 3. Обработка дефектов вида  98-XX
            elif re.match(r"^98-\d{2}", defect):
                if "98-03" in defect or "98-17" in defect:
                    processed_defects.append("98-17")
                else:
                    processed_defects.append("98-07")

            # 4. Обработка дефектов вида 30-ХХ
            elif re.match(r"^30-\d{2}", defect):
                if "30-34" in defect:
                    processed_defects.append("30-34")
                else:
                    processed_defects.append("30-35")

            # 5. Обрабатываем дефекты вида 21-ХХ
            elif re.match(r"^21-\d{2}", defect):
                code = defect.split()[0]
                comment = defect[len(code):].lower()  # всё, что после кода, в нижнем регистре

                if ("n" in comment and "g" in comment) or ("корроз" in comment):
                    processed_defects.append(f"{code} (n/g)")
                else:
                    processed_defects.append(f"{code} (ok)")

            # 6. Обрабатываем дефект вида 19-ХХ
            elif re.match(r"^19-\d{2}", defect):
                code = defect.split()[0]
                processed_defects.append(code)

            # 7. Обработка дефекта вида 12-ХХ
            elif re.match(r"^12-\d{2}", defect):
                code = defect.split()[0]
                processed_defects.append(code)

            # Обработка дефекта вида 00-04
            elif re.match(r"^00-04", defect):
                if "коннект" in defect.lower():
                    processed_defects.append("00-04 (в обл. коннектора)")
                else:
                    processed_defects.append("00-04")

            # 8. Обработка дефектов вида 09-XX
            elif re.match(r"^09-(\d{2})", defect):  # Сохраняем цифры после дефекта 09-
                match = re.match(r"^09-(\d{2})", defect)
                defect_number = match.group(1)  # Получаем цифры XX

                # Проверяем наличие ключевых слов в комментариях
                comment = defect.lower()

                if "значит" in comment and "видеокаб" not in comment and "незначит" not in comment:
                    processed_defects.append(f"09-{defect_number} (значительное)")
                elif "незначит" in comment and "видеокаб" not in comment:
                    processed_defects.append(f"09-{defect_number} (незначительное)")
                elif "значит" in comment and "видеокаб" in comment and "незначит" not in comment:
                    processed_defects.append(f"09-{defect_number} (значительное, видеокабеля)")
                elif "незначит" in comment and "видеокаб" in comment:
                    processed_defects.append(f"09-{defect_number} (незначительное, видеокабеля)")
                else:
                    processed_defects.append(f"09-{defect_number}")

            # Обработка дефектов 01-01
            if re.match(r"^01-01", defect):
                comment = defect.lower()
                oks, noks = count_ok_and_not_ok(comment)

                if ("новым") in comment and noks == 0 and not ("новой") in comment:
                    processed_defects.append("01-01 (с новым коннектором - ок)")
                elif ("новой") in comment and noks == 0 and ("новым") in comment:
                    processed_defects.append("01-01 (с новой платой - ок)")
                elif ("dual focus - не ок" not in comment) and ("новым") in comment and noks == 1:
                    processed_defects.append("01-01 (с новой платой - не ок)")

            # Обрабатываем дефекты 08-ХХ
            elif re.match(r"^08-(\d{2})", defect):  # Сохраняем цифры после дефекта 08-
                match = re.match(r"^08-(\d{2})", defect)
                defect_number = match.group(1)  # Получаем цифры XX

                # Проверяем комментарий на наличие "1"
                comment = defect.lower()

                # Обрабатываем дефекты 08-02, 08-04, 08-05
                if defect_number in ["02", "04", "05"]:
                    if "1" in comment:
                        processed_defects.append(f"08-{defect_number} (1)")
                    else:
                        processed_defects.append(f"08-{defect_number}")
                else:
                    processed_defects.append(f"08-{defect_number}")


            # Обработка 00-09 с особыми комментариями
            elif re.match(r"^00-09", defect):
                if any(word in defect.lower() for word in ["подъемника", "элеватора"]):
                    processed_defects.append("00-09 (рычага подъемника щипцов)")
                else:
                    processed_defects.append("00-09")

            elif re.match(r"^02-(01|02)", defect):
                # Проверяем наличие "значит" или "незначит"
                comment = defect.lower()

                if "значит" in comment and "незначит" not in comment:
                    # Добавляем "(значит)" если есть "значит"
                    processed_defects.append(f"{defect.split()[0]} (значит)")
                elif "незначит" in comment:
                    # Добавляем "(незначит)" если есть "незначит"
                    processed_defects.append(f"{defect.split()[0]} (незначит)")
                else:
                    # Если нет ни "значит", ни "незначит", оставляем дефект без комментариев
                    processed_defects.append(defect.split()[0])




            else:
                processed_defects.append(defect)
        else:
            processed_defects.append(defect)

    return processed_defects

df['processed_defects'] = df['processed_defects'].apply(process_defects)


# загрузка данных
df = pd.read_excel("masked_data.xlsx")
df['defects'] = df['defects'].astype(str)
df['specification'] = df['specification'].str.split(',') # преобразуем таргет в список

df = df.dropna(subset=['specification'])
df = df.dropna(subset=['defects'])

# преобразование дефектов с использований функций выше
df['defects'] = df['defects'].apply(process_defects)
df[['cycle_counts', 'defects']] = df['defects'].apply(extract_cycles_count)
df['defects'] = df['defects'].apply(remove_99_defects)
df[['cycle_counts', 'defects']] = df.apply(lambda row: extract_cycle_counts_from_list(row['defects']) if pd.isna(row['cycle_counts']) else pd.Series([row['cycle_counts'], row['defects']]), axis=1)
df['defects'] = df['defects'].apply(remove_noncode_comments)
# создание словаря код дефекта - наименование дефекта
df_transl = pd.read_excel("def_transl.xlsx")
code_to_name = dict(zip(df_transl['code'], df_transl['col2']))
df['defect_codes'] = df['defects'].apply(extract_defect_codes)
df["defects_text_describtion"] = df["defects"].apply(lambda x: replace_defect_codes_with_description(x, df_transl))


nltk.download('stopwords')
stop_words = set(stopwords.words('russian'))
stemmer = SnowballStemmer("russian")

df['defects_text_describtion'] = df['defects_text_describtion'].apply(manual_preprocess_text)


